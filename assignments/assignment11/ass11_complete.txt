"""Jahnke, Student ID: 0808831
kenny.jahnke@ndus.edu / smallpythoncode@gmail.com
CSCI 161, Fall, Lecture Sect 02, Lab Sect L03 (Online)
Assignment 11
Copyright (C) 2022 Kenneth Wayne Jahnke

Functions:
    file_check(*files)
        - Checks if *files are in the current working directory (CWD).
    ssn_dict_creator(ssn_file)
        - Creates a dictionary of data from ssn_file.
    detail_dict_creator(detail_file)
        - Creates a dictionary of data from detail_file.
    ssn_search(ssn_dict)
        - Prompts user for an SSN and searches ssn_dict for it.
    employee_id_details(employee_id, detail_dict)
        - Presents formatted details of an employee.
    display_sorted_details(detail_dict)
        - Prints elements of detail_dict sorted by employee_id.
    menu(option_set):
        - Prints a menu and prompts the user for an option.
    exit_func():
        - Exits menu loop in main() by raising the LoopBreak exception.
    main():
        - Script function.
    
Classes:
    LoopBreak(Exception):
        - The exception raised by exit_func().
"""

import os
import sys


def file_check(*files):
    """Checks if *files are in the current working directory (CWD).

    :param str files:
        Checks if these file names are in the CWD.
    :return:
        List of checked file not found in the CWD. The length of this
        list will equal 0 if all files are found.
    :rtype: list
    """
    absent_files = []
    for file in files:
        present = os.path.isfile(os.path.join(sys.path[0], file))
        if not present:
            absent_files.append(file)
    return absent_files


def ssn_dict_creator(ssn_file):
    """Creates a dictionary of data from ssn_file.

    Line format:
        <employee_id>, <ssn>, <date_of_birth>

    .. note::
        Datum separator is ', ' (read 'comma space').

    :param str ssn_file:
        The .txt from which data is read-in.
    :return:
        Dict w/ keys: {employee_id: {ssn, date_of_birth}}
    """
    ssn_dict = {}

    with open(ssn_file) as f:
        for line in f:
            elements = line.split(", ")
            no_newline = elements[-1].replace("\n", "")
            del elements[-1]
            elements.append(no_newline)

            ssn_dict[elements[0]] = {
                "ssn": elements[1],
                "date_of_birth": elements[2]
            }

    return ssn_dict


def detail_dict_creator(detail_file):
    """Creates a dictionary of data from detail_file.

    Line format:
        <employee_id>, <name>, <date_of_joining>, <department>,
        <annual_salary>

    .. note::
        Datum separator is ', ' (read 'comma space').

    :param str detail_file:
        The .txt from which data is read-in.
    :return:
        Dict w/ keys: {employee_id: {name, date_of_joining,
        department, annual_salary}}
    """
    detail_dict = {}

    with open(detail_file) as f:
        for line in f:
            elements = line.split(", ")
            no_newline = elements[-1].replace("\n", "")
            del elements[-1]
            elements.append(no_newline)

            detail_dict[elements[0]] = {
                "name": elements[1],
                "date_of_joining": elements[2],
                "department": elements[3],
                "annual_salary": elements[4]
            }

    return detail_dict


def ssn_search(ssn_dict):
    """Prompts user for an SSN and searches ssn_dict for it.

    .. note::
        The current version of this code does not handle semantic
        errors, such as entering letters in place of numerical digits
        for an SSN.

    :param dict ssn_dict:
        The dict with employee_id (str) as keys and a subsequent dict as
        the values. Subsequent dict has ssn (str) and date_of_birth
        (str) as keys.
    :return:
        Returns the employee_id that matches the SSN prompt if it is in
        ssn_dict. Otherwise, None.
    :rtype: str or None
    """
    while True:
        prompt = input("Enter an SSN: ").strip()
        if (len(prompt) != 11 or
                prompt[3] != "-" or
                prompt[7] != "-"):
            print("    An SSN must be entered in XXX-XXX-XXX format.")
        else:
            break

    for key, value in ssn_dict.items():
        if value["ssn"] == prompt:
            return key
        
    return None


def employee_id_details(employee_id, detail_dict):
    """Presents formatted details of an employee.

    .. note::
        The current version of this function does not implement
        exception handling. Exceptions are expected to be limited anyway
        as the only calls to this func (if the module is run as a
        script) have already verified the integrity of the parameters
        (i.e., employee_id is verified by ssn_search() and detail_dict
        is verified by detail_dict_creator(), both in main() ).

    :param str employee_id:
        The key that points to values in detail_dict.
    :param dict detail_dict:
        Contains the relevant employment details.
    :return:
        Formatted 'print-out' of employee details.
    :rtype: str
    """
    emp_id_tag = "Employee ID"
    name = "Name"
    date_of_joining = "Date of Joining"
    department = "Department"
    annual_salary = "Annual Salary"

    tags = [emp_id_tag, name, date_of_joining, department, annual_salary]
    left_column = 0
    for tag in tags:
        if len(tag) > left_column:
            left_column = len(tag)

    print_out = emp_id_tag + "." * (left_column + 3 - len(emp_id_tag)) + \
        employee_id + "\n" + \
        \
        name + "." * (left_column + 3 - len(name)) + \
        detail_dict[employee_id]["name"] + "\n" + \
        \
        date_of_joining + "." * (left_column + 3 - len(date_of_joining)) + \
        detail_dict[employee_id]["date_of_joining"] + "\n" + \
        \
        department + "." * (left_column + 3 - len(department)) + \
        detail_dict[employee_id]["department"] + "\n" + \
        \
        annual_salary + "." * (left_column + 3 - len(annual_salary)) + \
        detail_dict[employee_id]["annual_salary"]

    return print_out


def display_sorted_details(detail_dict):
    """Prints elements of detail_dict sorted by employee_id.
    
    employee_id is the key set of detail_dict.
    
    .. note::
        The current version of this function does not implement
        exception handling. Exceptions are expected to be limited anyway
        as the only calls to this func (if the module is run as a
        script) have already verified the integrity of the parameters
        (i.e., detail_dict is verified by detail_dict_creator() ).
        
    :param dict detail_dict:
        Contains the relevant employment details.
    :return: None
    """
    sorted_id = sorted(detail_dict.keys())
    
    header = "Employee Details"
    print(f"{header}\n" + "=" * len(header))
    for i in sorted_id:
        print(i + " - " + detail_dict[i]["name"] + " - " + \
            detail_dict[i]["date_of_joining"] + " - " + \
            detail_dict[i]["department"] + " - " + \
            detail_dict[i]["annual_salary"])


def menu(option_set):
    """Prints a menu and prompts the user for an option.

    :param dict option_set:
        The menu options. The keys are the numbered option as a str. The
        values are a dict. That dict has 2 elements: the prompt printed
        on the menu and the 'trigger', the func called if 'pulled'.
    :return: The option selected by the user.
    :rtype: str
    """
    print("\nMenu:")
    for key, value in option_set.items():
        print("    Option ", key, ": ", value["prompt"], sep="")
    prompt = input("Enter an option number: ")

    while True:
        if prompt in option_set:
            print()
            return prompt
        else:
            print(f"    {prompt} is not a valid option.")
            prompt = input("Enter an option number: ")


class LoopBreak(Exception):
    """The exception raised by exit_func().

    The triggers within the options dict in main indicate what action to
    take based on the option chosen by the user. To exit the program,
    the option prompt loop must be broken. Since the 'break' keyword
    cannot be stored as a dictionary value, another method is required
    to 'call' a break. The trigger to break the loop calls exit_func
    which raises this exception which is then handled by breaking the
    loop.
    """
    pass


def exit_func():
    """Exits menu loop in main() by raising the LoopBreak exception.

    The 'break' keyword cannot be stored as dict value. This func is
    called to raise the LoopBreak exception created to be handled by
    inserting a break.

    :raise LoopBreak:
        The exception is designed to be handled by breaking a loop.
    :return: None
    """
    raise LoopBreak


def main():
    """Script function.
    """
    ssn_file = "Employee_SSN.txt"
    detail_file = "Employee_Details.txt"

    missing_files = file_check(ssn_file, detail_file)
    if len(missing_files) > 0:
        for file in missing_files:
            print(f"{file} not found.")
        print("Ensure these files are in the current working directory\n"
              "    then rerun the program.")
        exit()

    data = {ssn_file: ssn_dict_creator(ssn_file),
            detail_file: detail_dict_creator(detail_file)}

    menu_options = {
        "1": {"prompt":
              "Search for an employee using their SSN and display the "
              "employee details.",
              "trigger": employee_id_details},
        "2": {"prompt":
              "Sort by Employee ID and display the employee details.",
              "trigger": display_sorted_details},
        "3": {"prompt": "Exit", "trigger": exit_func}
    }

    while True:
        selected_option = menu(menu_options)
        trigger = menu_options[selected_option]["trigger"]
        try:
            data = {ssn_file: ssn_dict_creator(ssn_file),
            detail_file: detail_dict_creator(detail_file)}
            if trigger is employee_id_details:
                query = ssn_search(data[ssn_file])
                if query:
                    print_out = trigger(query, data[detail_file])
                    print(print_out)
                else:
                    print(f"Queried SSN not found in {ssn_file}")
            elif trigger is display_sorted_details:
                trigger(data[detail_file])
            else:
                trigger()
        except LoopBreak:
            print("Goodbye.")
            break


if __name__ == "__main__":
    main()

# All work and no play makes Jack a dull boy.
