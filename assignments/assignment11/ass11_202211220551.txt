"""Jahnke, Student ID: 0808831
kenny.jahnke@ndus.edu / smallpythoncode@gmail.com
CSCI 161, Fall, Lecture Sect 02, Lab Sect L03 (Online)
Assignment 11
Copyright (C) 2022 Kenneth Wayne Jahnke

"""

import os
import sys


def file_check(*files):
    """Checks if *files are in the current working directory (CWD).

    :param str files:
        Checks if these file names are in the CWD.
    :return:
        List of checked file not found in the CWD. The length of this
        list will equal 0 if all files are found.
    :rtype: list
    """
    absent_files = []
    for file in files:
        present = os.path.isfile(os.path.join(sys.path[0], file))
        if not present:
            absent_files.append(file)
    return absent_files


def ssn_dict_creator(ssn_file):
    """Creates a dictionary of data from ssn_file.

    Line format:
        <employee_id>, <ssn>, <date_of_birth>

    .. note::
        Datum separator is ', ' (read 'comma space').

    :param str ssn_file:
        The .txt from which data is read-in.
    :return:
        Dict w/ keys: {employee_id: {ssn, date_of_birth}}
    """
    ssn_dict = {}

    with open(ssn_file) as f:
        for line in f:
            elements = line.split(", ")
            no_newline = elements[-1].replace("\n", "")
            del elements[-1]
            elements.append(no_newline)

            ssn_dict[elements[0]] = {
                "ssn": elements[1],
                "date_of_birth": elements[2]
            }

    return ssn_dict


def detail_dict_creator(detail_file):
    """Creates a dictionary of data from detail_file.

    Line format:
        <employee_id>, <name>, <date_of_joining>, <department>,
        <annual_salary>

    .. note::
        Datum separator is ', ' (read 'comma space').

    :param str detail_file:
        The .txt from which data is read-in.
    :return:
        Dict w/ keys: {employee_id: {name, date_of_joining,
        department, annual_salary}}
    """
    detail_dict = {}

    with open(detail_file) as f:
        for line in f:
            elements = line.split(", ")
            no_newline = elements[-1].replace("\n", "")
            del elements[-1]
            elements.append(no_newline)

            detail_dict[elements[0]] = {
                "name": elements[1],
                "date_of_joining": elements[2],
                "department": elements[3],
                "annual_salary": elements[4]
            }

    return detail_dict


# # FIXME - is this needed?
# def update_data(**dict_datafile_pair):  # FIXME - kwargs??
#     for key, value in dict_datafile_pair.items():
#         test_string = f"{key}\n{value}"


# TODO - specify in main None return and id_found return, 
#  link employee_id_details
def ssn_search(ssn_dict):
    """ # TODO

    .. note::
        The current version of this code does not handle semantic
        errors, such as entering letters in place of numerical digits
        for an SSN.

    :param dict ssn_dict:
        The dict with employee_id (str) as keys and a subsequent dict as
        the values. Subsequent dict has ssn (str) and date_of_birth
        (str) as keys.
    :return:
    :rtype: str or
    """
    while True:
        prompt = input("Enter an SSN: ").strip()
        if (len(prompt) != 11 or
                prompt[3] != "-" or
                prompt[7] != "-"):
            print("    An SSN must be entered in XXX-XXX-XXX format.")
        else:
            break

    for key, value in ssn_dict.items():
        if value["ssn"] == prompt:
            return key
        else:
            return None


def employee_id_details(employee_id, detail_dict):
    """Presents formatted details of an employee.

    .. note::
        The current version of this function does not implement
        exception handling. Exceptions are expected to be limited anyway
        as the only calls to this func (if the module is run as a
        script) have already verified the integrity of the parameters
        (i.e., employee_id is verified by ssn_search() and detail_dict
        is verified by detail_dict_creator(), both in main() ).

    :param str employee_id:
        The key that points to values in detail_dict.
    :param dict detail_dict:
        Contains the relevant employment details.
    :return:
        Formatted 'print-out' of employee details.
    :rtype: str
    """
    emp_id_tag = "Employee ID"
    name = "Name"
    date_of_joining = "Date of Joining"
    department = "Department"
    annual_salary = "Annual Salary"

    tags = [emp_id_tag, name, date_of_joining, department, annual_salary]
    left_column = 0
    for tag in tags:
        if len(tag) > left_column:
            left_column = len(tag)

    print_out = emp_id_tag + "." * (left_column + 3 - len(emp_id_tag)) + \
        employee_id + "\n" + \
        \
        name + "." * (left_column + 3 - len(name)) + \
        detail_dict[employee_id]["name"] + "\n" + \
        \
        date_of_joining + "." * (left_column + 3 - len(date_of_joining)) + \
        detail_dict[employee_id]["date_of_joining"] + "\n" + \
        \
        department + "." * (left_column + 3 - len(department)) + \
        detail_dict[employee_id]["department"] + "\n" + \
        \
        annual_salary + "." * (left_column + 3 - len(annual_salary)) + \
        detail_dict[employee_id]["annual_salary"]

    return print_out


def menu(option_set):
    """Prints a menu and prompts the user for an option.

    :param dict option_set:
        The menu options. The keys are the numbered option as a str. The
        values are a dict. That dict has 2 elements: the prompt printed
        on the menu and the 'trigger', the func called if 'pulled'.
    :return: The option selected by the user.
    :rtype: str
    """
    print("\nMenu:")
    for key, value in option_set.items():
        print("    Option ", key, ": ", value["prompt"], sep="")
    prompt = input("Enter an option number: ")

    while True:
        if prompt in option_set:
            print()
            return prompt
        else:
            print(f"    {prompt} is not a valid option.")
            prompt = input("Enter an option number: ")


class LoopBreak(Exception):
    """The exception raised by the break_loop func.

    The triggers within the options dict in main indicate what action to
    take based on the option chosen by the user. To exit the program,
    the option prompt loop must be broken. Since the 'break' keyword
    cannot be stored as a dictionary value, another method is required
    to 'call' a break. The trigger to break the loop calls break_loop
    which raises this exception which is then handled by breaking the
    loop.
    """
    pass


def exit_func():
    """Exits the menu by raising the LoopBreak exception.

    The 'break' keyword cannot be stored as dict value. This func is
    called to raise the LoopBreak exception created to be handled by
    inserting a break.

    :raise LoopBreak:
        The exception is designed to be handled by breaking a loop.
    :return: None
    """
    raise LoopBreak


def main():
    ssn_file = "Employee_SSN.txt"
    detail_file = "Employee_Details.txt"

    missing_files = file_check(ssn_file, detail_file)
    if len(missing_files) > 0:
        for file in missing_files:
            print(f"{file} not found.")
        print("Ensure these files are in the current working directory\n"
              "    then rerun the program.")
        exit()

    data = {ssn_file: ssn_dict_creator(ssn_file),
            detail_file: detail_dict_creator(detail_file)}

    # TODO
    # menu_options = {
    #     "1": {"prompt":
    #           "Search for an employee using their SSN and display the "
    #           "employee details.",
    #           "trigger": add_student,
    #           "file": ssn_file},  # file searched for ssn
    #     "2": {"prompt":
    #           "Sort by Employee ID and display the employee details.",
    #           "trigger": add_faculty,
    #           "file": detail_file},  # file to sort by employee_id
    #     "4": {"prompt": "Exit", "trigger": exit_func}
    # }

    # # FIXME - update_data() in menu loop at option call
    # ssn_data = ssn_dict_creator(ssn_file)
    # # for key, value in ssn_data.items():
    # #     print(f"{key}: {value}")
    #
    # print()
    #
    # # FIXME - update_data() in menu loop at option call
    # detail_data = detail_dict_creator(detail_file)
    # # for key, value in detail_data.items():
    # #     print(f"{key}: {value}")
    #
    # test = update_data(ssn_data=ssn_file)
    # print(test)

    print(data)  # FIXME


if __name__ == "__main__":
    # main()

    test_detail = detail_dict_creator("Employee_Details.txt")
    test_ssn = ssn_dict_creator("Employee_SSN.txt")
    print(test_ssn)
    print(ssn_search(test_ssn))

# All work and no play makes Jack a dull boy.
